df
cluster_merge <- function(raw_data, label_hat){
index <- unique(label_hat)
df <- data.frame(stringsAsFactors = FALSE)
for (i in 1:length(index)){
Coauthor <- NULL
Paper <- NULL
Journal <- NULL
Cluster <- NULL
Cluster[i] <- i
Coauthor[i] <- paste(raw_data[which(label_hat == i),]$Coauthor, collapse = " ")
Paper[i] <- paste(raw_data[which(label_hat == i),]$Paper, collapse = " ")
Journal[i] <- paste(raw_data[which(label_hat == i),]$Journal, collapse = " ")
row_i<- cbind(Cluster[i], Coauthor[i], Paper[i], Journal[i])
return(row_i)
}
}
rep(1,2)
ha <- c(rep(1, 122), rep(2, 122))
cluster_merge(AKumar,ha)
cluster_merge <- function(raw_data, label_hat){
index <- unique(label_hat)
df <- data.frame(stringsAsFactors = FALSE)
for (i in 1:length(index)){
Coauthor <- NULL
Paper <- NULL
Journal <- NULL
Cluster <- NULL
Cluster[i] <- i
Coauthor[i] <- paste(raw_data[which(label_hat == i),]$Coauthor, collapse = " ")
Paper[i] <- paste(raw_data[which(label_hat == i),]$Paper, collapse = " ")
Journal[i] <- paste(raw_data[which(label_hat == i),]$Journal, collapse = " ")
row_i<- data.frame(Cluster[i], Coauthor[i], Paper[i], Journal[i])
return(row_i)
}
}
cluster_merge(AKumar,ha)
cluster_merge <- function(raw_data, label_hat){
index <- unique(label_hat)
df <- data.frame(stringsAsFactors = FALSE)
for (i in 1:length(index)){
Coauthor <- NULL
Paper <- NULL
Journal <- NULL
Cluster <- NULL
Cluster[i] <- i
Coauthor[i] <- paste(raw_data[which(label_hat == i),]$Coauthor, collapse = " ")
Paper[i] <- paste(raw_data[which(label_hat == i),]$Paper, collapse = " ")
Journal[i] <- paste(raw_data[which(label_hat == i),]$Journal, collapse = " ")
row_i<- data.frame(Cluster[i], Coauthor[i], Paper[i], Journal[i])
return(mode(row_i))
}
}
cluster_merge(AKumar,ha)
cluster_merge <- function(raw_data, label_hat){
index <- unique(label_hat)
df <- data.frame(stringsAsFactors = FALSE)
for (i in 1:length(index)){
Coauthor <- NULL
Paper <- NULL
Journal <- NULL
Cluster <- NULL
Cluster[i] <- i
Coauthor[i] <- paste(raw_data[which(label_hat == i),]$Coauthor, collapse = " ")
Paper[i] <- paste(raw_data[which(label_hat == i),]$Paper, collapse = " ")
Journal[i] <- paste(raw_data[which(label_hat == i),]$Journal, collapse = " ")
row_i<- as.data.frame(Cluster[i], Coauthor[i], Paper[i], Journal[i])
return(row_i)
}
}
cluster_merge(AKumar,ha)
cluster_merge <- function(raw_data, label_hat){
index <- unique(label_hat)
df <- data.frame(stringsAsFactors = FALSE)
for (i in 1:length(index)){
Coauthor <- NULL
Paper <- NULL
Journal <- NULL
Cluster <- NULL
Cluster[i] <- i
Coauthor[i] <- paste(raw_data[which(label_hat == i),]$Coauthor, collapse = " ")
Paper[i] <- paste(raw_data[which(label_hat == i),]$Paper, collapse = " ")
Journal[i] <- paste(raw_data[which(label_hat == i),]$Journal, collapse = " ")
row_i<- data.frame(Cluster[i], Coauthor[i], Paper[i], Journal[i])
return(row_i)
}
}
cluster_merge(AKumar,ha)
cluster_merge <- function(raw_data, label_hat){
index <- unique(label_hat)
df <- data.frame(stringsAsFactors = FALSE)
for (i in 1:length(index)){
Coauthor <- NULL
Paper <- NULL
Journal <- NULL
Cluster <- NULL
Cluster[i] <- i
Coauthor[i] <- paste(raw_data[which(label_hat == i),]$Coauthor, collapse = " ")
Paper[i] <- paste(raw_data[which(label_hat == i),]$Paper, collapse = " ")
Journal[i] <- paste(raw_data[which(label_hat == i),]$Journal, collapse = " ")
row_i<- cbind(Cluster[i], Coauthor[i], Paper[i], Journal[i])
return(row_i)
}
}
cluster_merge(AKumar,ha)
cluster_merge <- function(raw_data, label_hat){
index <- unique(label_hat)
df <- data.frame(stringsAsFactors = FALSE)
for (i in 1:length(index)){
Coauthor <- NULL
Paper <- NULL
Journal <- NULL
Cluster <- NULL
row <- NULL
Cluster[i] <- i
Coauthor[i] <- paste(raw_data[which(label_hat == i),]$Coauthor, collapse = " ")
Paper[i] <- paste(raw_data[which(label_hat == i),]$Paper, collapse = " ")
Journal[i] <- paste(raw_data[which(label_hat == i),]$Journal, collapse = " ")
row[i]<- cbind(Cluster[i], Coauthor[i], Paper[i], Journal[i])
return(row)
}
}
cluster_merge(AKumar,ha)
cluster_merge <- function(raw_data, label_hat){
index <- unique(label_hat)
df <- data.frame(stringsAsFactors = FALSE)
for (i in 1:length(index)){
Coauthor <- NULL
Paper <- NULL
Journal <- NULL
Cluster <- NULL
Cluster[i] <- i
Coauthor[i] <- paste(raw_data[which(label_hat == i),]$Coauthor, collapse = " ")
Paper[i] <- paste(raw_data[which(label_hat == i),]$Paper, collapse = " ")
Journal[i] <- paste(raw_data[which(label_hat == i),]$Journal, collapse = " ")
row_i<- cbind(Cluster[i], Coauthor[i], Paper[i], Journal[i])
return(row_i)
}
}
cluster_merge(AKumar,ha)
df <- data.frame(Cluster = integer(),Coauthor = character(), Paper = character(), Journal = character())
rbind(df,c(1,2,3,4,))
rbind(df,c(1,2,3,4))
df <- rbind(df,c(1,2,3,4))
df
df <- data.frame(Cluster = integer(), Coauthor = character(), Paper = character(),
Journal = character(), stringsAsFactors = FALSE)
df <- rbind(df,c(1,2,3,4))
df
df <- data.frame(Cluster = integer(), Coauthor = character(), Paper = character(),
Journal = character(), stringsAsFactors = FALSE)
cluster_merge <- function(raw_data, label_hat){
index <- unique(label_hat)
df <- data.frame(Cluster = integer(), Coauthor = character(), Paper = character(),
Journal = character(), stringsAsFactors = FALSE)
for (i in 1:length(index)){
Coauthor <- NULL
Paper <- NULL
Journal <- NULL
Cluster <- NULL
Cluster[i] <- i
Coauthor[i] <- paste(raw_data[which(label_hat == i),]$Coauthor, collapse = " ")
Paper[i] <- paste(raw_data[which(label_hat == i),]$Paper, collapse = " ")
Journal[i] <- paste(raw_data[which(label_hat == i),]$Journal, collapse = " ")
row_i<- cbind(Cluster[i], Coauthor[i], Paper[i], Journal[i])
df <- rbind(df, row_i)
}
}
cluster_merge(AKumar,ha)
cluster_merge <- function(raw_data, label_hat){
index <- unique(label_hat)
df <- data.frame(Cluster = integer(), Coauthor = character(), Paper = character(),
Journal = character(), stringsAsFactors = FALSE)
for (i in 1:length(index)){
Coauthor <- NULL
Paper <- NULL
Journal <- NULL
Cluster <- NULL
Cluster[i] <- i
Coauthor[i] <- paste(raw_data[which(label_hat == i),]$Coauthor, collapse = " ")
Paper[i] <- paste(raw_data[which(label_hat == i),]$Paper, collapse = " ")
Journal[i] <- paste(raw_data[which(label_hat == i),]$Journal, collapse = " ")
row_i<- cbind(Cluster[i], Coauthor[i], Paper[i], Journal[i])
df <- rbind(df, row_i)
}
return(df)
}
cluster_merge(AKumar,ha)
cluster_merge(AKumar, c(rep(1,50), rep(2,50), rep(3,50), rep(4,50), rep(6,44)))
cluster_merge <- function(raw_data, label_hat){
index <- unique(label_hat)
df <- data.frame(Cluster = integer(), Coauthor = character(), Paper = character(),
Journal = character(), stringsAsFactors = FALSE)
for (i in 1:length(index)){
Coauthor <- NULL
Paper <- NULL
Journal <- NULL
Cluster <- NULL
Cluster[i] <- i
Coauthor[i] <- paste(raw_data[which(label_hat == i),]$Coauthor, collapse = " ")
Paper[i] <- paste(raw_data[which(label_hat == i),]$Paper, collapse = " ")
Journal[i] <- paste(raw_data[which(label_hat == i),]$Journal, collapse = " ")
row_i<- cbind(Cluster[i], Coauthor[i], Paper[i], Journal[i])
df <- rbind(df, row_i)
}
return(data.frame(df))
}
cluster_merge(AKumar, c(rep(1,50), rep(2,50), rep(3,50), rep(4,50), rep(6,44)))
dim(df)
df
cluster_merge(AKumar, c(rep(1,50), rep(2,50), rep(3,50), rep(4,50), rep(6,44)))
df <- data.frame(Cluster = integer(), Coauthor = character(), Paper = character(),
Journal = character(), stringsAsFactors = FALSE)
df
raw_data <- AKumar
dim(AKumar)
colnames(AKumar)
raw_data <- AKumar[,2:4]
unique_label_hat <- unique(label_hat)
fake <- rep(1:4, each = 1000)
fake <- fake[1:244]
sapply(unique_label_hat, mergesomerows, mergevector = raw_data$Coauthor, label_hat = fake)
mergesomerows  <- function(cluster.id, mergevector, label_hat){
mergevector[cluster.id == label_hat]
}
sapply(unique_label_hat, mergesomerows, mergevector = raw_data$Coauthor, label_hat = fake)
unique_label_hat <- unique(label_hat)
label_hat <- fake
unique_label_hat <- unique(label_hat)
sapply(unique_label_hat, mergesomerows, mergevector = raw_data$Coauthor, label_hat = label_hat)
label_hat
label_hat <- rep(1:4,400)
label_hat <- rep(1:4,400)[1:244]
sapply(unique_label_hat, mergesomerows, mergevector = raw_data$Coauthor, label_hat = label_hat)
paste(sapply(unique_label_hat, mergesomerows, mergevector = raw_data$Coauthor, label_hat = label_hat))
paste0(sapply(unique_label_hat, mergesomerows, mergevector = raw_data$Coauthor, label_hat = label_hat))
paste(sapply(unique_label_hat, mergesomerows, mergevector = raw_data$Coauthor, label_hat = label_hat), collapse = " ")
mergesomerows  <- function(cluster.id, mergevector, label_hat){
paste(mergevector[cluster.id == label_hat], collapse = " ")
}
sapply(unique_label_hat,
mergesomerows,
mergevector = raw_data$Coauthor, label_hat = label_hat))
sapply(unique_label_hat,
mergesomerows,
mergevector = raw_data$Coauthor, label_hat = label_hat)
label_hat
Coauthor <- sapply(unique_label_hat,
mergesomerows,
mergevector = raw_data$Coauthor, label_hat = label_hat)
length(Coauthor)
unique_label_hat
unique_label_hat <- unique(label_hat)
Coauthor <- sapply(unique_label_hat,
mergesomerows,
mergevector = raw_data$Coauthor, label_hat = label_hat)
Coauthor
Coauthor <- sapply(unique_label_hat,
mergesomerows,
mergevector = raw_data$Coauthor, label_hat = label_hat)
Paper <- sapply(unique_label_hat,
mergesomerows,
mergevector = raw_data$Paper, label_hat = label_hat)
Journal <- sapply(unique_label_hat,
mergesomerows,
mergevector = raw_data$Journal, label_hat = label_hat)
Journal
merged_matrix <- cbind(Coauthor, Paper, Journal)
merged_matrix
dim(Coauthor <- sapply(unique_label_hat,
mergesomerows,
mergevector = raw_data$Coauthor, label_hat = label_hat)
)
dim(merged_matrix)
library(parallel)
detectCores()
cluster_merge <- function(raw_data, label_hat){
unique_label_hat <- unique(label_hat)
df <- data.frame(Cluster = integer(), Coauthor = character(), Paper = character(),
Journal = character(), stringsAsFactors = FALSE)
Coauthor <- sapply(unique_label_hat,
mergesomerows,
mergevector = raw_data$Coauthor, label_hat = label_hat)
Paper <- sapply(unique_label_hat,
mergesomerows,
mergevector = raw_data$Paper, label_hat = label_hat)
Journal <- sapply(unique_label_hat,
mergesomerows,
mergevector = raw_data$Journal, label_hat = label_hat)
merged_matrix <- cbind(Coauthor, Paper, Journal)
return(list(Clustered = merged_matrix, matrix_label = unique_label_hat))
}
cluster_merge(AKumar, rep(1:4,61))
cluster_merge(AKumar, rep(1:4,61))$Clustered
cluster_merge(AKumar, rep(1:4,61))$Clustered[[1]]
cosine_similarity <- function(data){
if (!require("text2vec")) install.packages("text2vec")
if (!require("qlcMatrix")) install.packages("qlcMatrix")
library(text2vec)
library(qlcMatrix)
feature <- list()
for (i in 2:4){
it_train <- itoken(data[,i],
preprocessor = tolower,
tokenizer = word_tokenizer,
ids = data$PaperID,
# turn off progressbar because it won't look nice in rmd
progressbar = FALSE)
vocab <- create_vocabulary(it_train, stopwords = c("a", "an", "the", "in", "on",
"at", "of", "above", "under"))
#vocab
vectorizer <- vocab_vectorizer(vocab)
dtm_train <- create_dtm(it_train, vectorizer)
tfidf <- TfIdf$new()
dtm_train_tfidf <- fit_transform(dtm_train, tfidf)
ftfidf<-as.matrix(dtm_train_tfidf)
feature[[i-1]] <- as.matrix(cosSparse(t(ftfidf)))
}
# feature$label<-factor(data$AuthorID)
return(feature)
}
cosine_similarity(AKumar)
mergesomerows  <- function(cluster.id, mergevector, label_hat){
paste(mergevector[cluster.id == label_hat], collapse = " ")
}
cluster_merge <- function(raw_data, label_hat){
unique_label_hat <- unique(label_hat)
df <- data.frame(Cluster = integer(), Coauthor = character(), Paper = character(),
Journal = character(), stringsAsFactors = FALSE)
Coauthor <- sapply(unique_label_hat,
mergesomerows,
mergevector = raw_data$Coauthor, label_hat = label_hat)
Paper <- sapply(unique_label_hat,
mergesomerows,
mergevector = raw_data$Paper, label_hat = label_hat)
Journal <- sapply(unique_label_hat,
mergesomerows,
mergevector = raw_data$Journal, label_hat = label_hat)
merged_matrix <- cbind(Coauthor, Paper, Journal)
return(list(matrix_label = unique_label_hat,Clustered = merged_matrix))
}
cluster_merge(AKumar, rep(1:4,61))$Clustered
cluster_merge <- function(raw_data, label_hat){
unique_label_hat <- unique(label_hat)
df <- data.frame(Cluster = integer(), Coauthor = character(), Paper = character(),
Journal = character(), stringsAsFactors = FALSE)
Coauthor <- sapply(unique_label_hat,
mergesomerows,
mergevector = raw_data$Coauthor, label_hat = label_hat)
Paper <- sapply(unique_label_hat,
mergesomerows,
mergevector = raw_data$Paper, label_hat = label_hat)
Journal <- sapply(unique_label_hat,
mergesomerows,
mergevector = raw_data$Journal, label_hat = label_hat)
merged_matrix <- cbind(Coauthor, Paper, Journal)
return(list(matrix_label = unique_label_hat, Clustered = merged_matrix))
}
cluster_merge(AKumar, rep(1:4,61))
cluster_merge(AKumar, rep(1:4,61))$Clustered[[1]]
cluster_merge(AKumar, rep(1:4,61))$Clustered[[1]]
cluster_merge(AKumar, rep(1:4,61))$Clustered[[2]]
cluster_merge(AKumar, rep(1:4,61))$Clustered[1]
cluster_merge(AKumar, rep(1:4,61))$Clustered
cluster_merge(AKumar, rep(1:4,61))$Clustered[2]
cluster_merge(AKumar, rep(1:4,61))$Clustered[1]
cluster_merge(AKumar, rep(1:4,61))$Clustered
cluster_merge(AKumar, rep(1:4,61))$Clustered[4]
cluster_merge(AKumar, rep(1:4,61))$Clustered[Journal]
cluster_merge(AKumar, rep(1:4,61))$Clustered[[1]]
cluster_merge(AKumar, rep(1:4,61))$Clustered
mode(cluster_merge(AKumar, rep(1:4,61))$Clustered)
cluster_merge(AKumar, rep(1:4,61))[Coauthor]
cluster_merge(AKumar, rep(1:4,61))[[Coauthor]]
cluster_merge(AKumar, rep(1:4,61))$Coauthor
cluster_merge(AKumar, rep(1:4,61))$Clustered
cluster_merge(AKumar, rep(1:4,61))$Clustered[1,]
cluster_merge(AKumar, rep(1:4,61))$Clustered[,1]
cluster_merge(AKumar, rep(1:4,61))$Clustered[,2]
cluster_merge(AKumar, rep(1:4,61))$Clustered[,3]
View(raw_data)
cluster_merge <- function(raw_data, label_hat){
unique_label_hat <- unique(label_hat)
df <- data.frame(Cluster = integer(), Coauthor = character(), Paper = character(),
Journal = character(), stringsAsFactors = FALSE)
Coauthor <- sapply(unique_label_hat,
mergesomerows,
mergevector = raw_data$Coauthor, label_hat = label_hat)
Paper <- sapply(unique_label_hat,
mergesomerows,
mergevector = raw_data$Paper, label_hat = label_hat)
Journal <- sapply(unique_label_hat,
mergesomerows,
mergevector = raw_data$Journal, label_hat = label_hat)
merged_matrix <- cbind(Coauthor, Paper, Journal)
return(list(Clustered = merged_matrix, matrix_label = unique_label_hat))
}
cosine_similarity(cluster_merge(AKumar. rep(1:4,61)))
cosine_similarity(cluster_merge(AKumar, rep(1:4,61)))
cosine_similarity <- function(data){
if (!require("text2vec")) install.packages("text2vec")
if (!require("qlcMatrix")) install.packages("qlcMatrix")
library(text2vec)
library(qlcMatrix)
feature <- list()
for (i in 1:3){
it_train <- itoken(data$Clustered[,i],
preprocessor = tolower,
tokenizer = word_tokenizer,
# ids = data$PaperID,
# turn off progressbar because it won't look nice in rmd
progressbar = FALSE)
vocab <- create_vocabulary(it_train, stopwords = c("a", "an", "the", "in", "on",
"at", "of", "above", "under"))
#vocab
vectorizer <- vocab_vectorizer(vocab)
dtm_train <- create_dtm(it_train, vectorizer)
tfidf <- TfIdf$new()
dtm_train_tfidf <- fit_transform(dtm_train, tfidf)
ftfidf<-as.matrix(dtm_train_tfidf)
feature[[i]] <- as.matrix(cosSparse(t(ftfidf)))
}
# feature$label<-factor(data$AuthorID)
return(feature)
}
cosine_similarity(cluster_merge(AKumar, rep(1:4,61)))
AKumar
cosine_similarity(cluster_merge(AKumar, rep(1:4,61)))
## data = cluster_merge(AKumar, rep(1:4,61))
cosine_similarity <- function(data){
if (!require("text2vec")) install.packages("text2vec")
if (!require("qlcMatrix")) install.packages("qlcMatrix")
library(text2vec)
library(qlcMatrix)
feature <- list()
for (i in 1:3){
it_train <- itoken(data$Clustered[,i],
preprocessor = tolower,
tokenizer = word_tokenizer,
# ids = data$PaperID,
# turn off progressbar because it won't look nice in rmd
progressbar = FALSE)
vocab <- create_vocabulary(it_train, stopwords = c("a", "an", "the", "in", "on",
"at", "of", "above", "under"))
#vocab
vectorizer <- vocab_vectorizer(vocab)
dtm_train <- create_dtm(it_train, vectorizer)
tfidf <- TfIdf$new()
dtm_train_tfidf <- fit_transform(dtm_train, tfidf)
ftfidf<-as.matrix(dtm_train_tfidf)
feature[[i]] <- as.matrix(cosSparse(t(ftfidf)))
}
# feature$label<-factor(data$AuthorID)
return(CLUSTER.ID = rownames(feature[[1]]), MATRIX = feature)
}
cosine_similarity(cluster_merge(AKumar, rep(1:4,61)))
## data = cluster_merge(AKumar, rep(1:4,61))
cosine_similarity <- function(data){
if (!require("text2vec")) install.packages("text2vec")
if (!require("qlcMatrix")) install.packages("qlcMatrix")
library(text2vec)
library(qlcMatrix)
feature <- list()
for (i in 1:3){
it_train <- itoken(data$Clustered[,i],
preprocessor = tolower,
tokenizer = word_tokenizer,
# ids = data$PaperID,
# turn off progressbar because it won't look nice in rmd
progressbar = FALSE)
vocab <- create_vocabulary(it_train, stopwords = c("a", "an", "the", "in", "on",
"at", "of", "above", "under"))
#vocab
vectorizer <- vocab_vectorizer(vocab)
dtm_train <- create_dtm(it_train, vectorizer)
tfidf <- TfIdf$new()
dtm_train_tfidf <- fit_transform(dtm_train, tfidf)
ftfidf<-as.matrix(dtm_train_tfidf)
feature[[i]] <- as.matrix(cosSparse(t(ftfidf)))
}
# feature$label<-factor(data$AuthorID)
return(list(CLUSTER.ID = rownames(feature[[1]]), MATRIX = feature))
}
cosine_similarity(cluster_merge(AKumar, rep(1:4,61)))
## data = cluster_merge(AKumar, rep(1:4,61))
cosine_similarity <- function(data){
if (!require("text2vec")) install.packages("text2vec")
if (!require("qlcMatrix")) install.packages("qlcMatrix")
library(text2vec)
library(qlcMatrix)
feature <- list()
for (i in 1:3){
it_train <- itoken(data$Clustered[,i],
preprocessor = tolower,
tokenizer = word_tokenizer,
# ids = data$PaperID,
# turn off progressbar because it won't look nice in rmd
progressbar = FALSE)
vocab <- create_vocabulary(it_train, stopwords = c("a", "an", "the", "in", "on",
"at", "of", "above", "under"))
#vocab
vectorizer <- vocab_vectorizer(vocab)
dtm_train <- create_dtm(it_train, vectorizer)
tfidf <- TfIdf$new()
dtm_train_tfidf <- fit_transform(dtm_train, tfidf)
ftfidf<-as.matrix(dtm_train_tfidf)
feature[[i]] <- as.matrix(cosSparse(t(ftfidf)))
}
# feature$label<-factor(data$AuthorID)
return(list(CLUSTER.ID = as.numeric(rownames(feature[[1]])), MATRIX = feature))
}
cosine_similarity(cluster_merge(AKumar, rep(1:4,61)))
